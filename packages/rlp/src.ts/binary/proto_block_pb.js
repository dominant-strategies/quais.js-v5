// source: proto-block.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var proto_common_pb = require('./proto_common_pb.js');
goog.object.extend(proto, proto_common_pb);
goog.exportSymbol('proto.block.ProtoAccessList', null, global);
goog.exportSymbol('proto.block.ProtoAccessTuple', null, global);
goog.exportSymbol('proto.block.ProtoOutPoint', null, global);
goog.exportSymbol('proto.block.ProtoTransaction', null, global);
goog.exportSymbol('proto.block.ProtoTxIn', null, global);
goog.exportSymbol('proto.block.ProtoTxIns', null, global);
goog.exportSymbol('proto.block.ProtoTxOut', null, global);
goog.exportSymbol('proto.block.ProtoTxOuts', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.block.ProtoTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.block.ProtoTransaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.block.ProtoTransaction.displayName = 'proto.block.ProtoTransaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.block.ProtoAccessList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.block.ProtoAccessList.repeatedFields_, null);
};
goog.inherits(proto.block.ProtoAccessList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.block.ProtoAccessList.displayName = 'proto.block.ProtoAccessList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.block.ProtoTxIns = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.block.ProtoTxIns.repeatedFields_, null);
};
goog.inherits(proto.block.ProtoTxIns, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.block.ProtoTxIns.displayName = 'proto.block.ProtoTxIns';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.block.ProtoTxOuts = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.block.ProtoTxOuts.repeatedFields_, null);
};
goog.inherits(proto.block.ProtoTxOuts, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.block.ProtoTxOuts.displayName = 'proto.block.ProtoTxOuts';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.block.ProtoTxIn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.block.ProtoTxIn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.block.ProtoTxIn.displayName = 'proto.block.ProtoTxIn';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.block.ProtoOutPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.block.ProtoOutPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.block.ProtoOutPoint.displayName = 'proto.block.ProtoOutPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.block.ProtoTxOut = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.block.ProtoTxOut, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.block.ProtoTxOut.displayName = 'proto.block.ProtoTxOut';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.block.ProtoAccessTuple = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.block.ProtoAccessTuple.repeatedFields_, null);
};
goog.inherits(proto.block.ProtoAccessTuple, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.block.ProtoAccessTuple.displayName = 'proto.block.ProtoAccessTuple';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.block.ProtoTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.block.ProtoTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.block.ProtoTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block.ProtoTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    to: msg.getTo_asB64(),
    nonce: jspb.Message.getFieldWithDefault(msg, 3, 0),
    value: msg.getValue_asB64(),
    gas: jspb.Message.getFieldWithDefault(msg, 5, 0),
    data: msg.getData_asB64(),
    chainId: msg.getChainId_asB64(),
    gasFeeCap: msg.getGasFeeCap_asB64(),
    gasTipCap: msg.getGasTipCap_asB64(),
    accessList: (f = msg.getAccessList()) && proto.block.ProtoAccessList.toObject(includeInstance, f),
    etxGasLimit: jspb.Message.getFieldWithDefault(msg, 11, 0),
    etxGasPrice: msg.getEtxGasPrice_asB64(),
    etxGasTip: msg.getEtxGasTip_asB64(),
    etxData: msg.getEtxData_asB64(),
    etxAccessList: (f = msg.getEtxAccessList()) && proto.block.ProtoAccessList.toObject(includeInstance, f),
    v: msg.getV_asB64(),
    r: msg.getR_asB64(),
    s: msg.getS_asB64(),
    originatingTxHash: (f = msg.getOriginatingTxHash()) && proto_common_pb.ProtoHash.toObject(includeInstance, f),
    etxIndex: jspb.Message.getFieldWithDefault(msg, 20, 0),
    etxSender: msg.getEtxSender_asB64(),
    txIns: (f = msg.getTxIns()) && proto.block.ProtoTxIns.toObject(includeInstance, f),
    txOuts: (f = msg.getTxOuts()) && proto.block.ProtoTxOuts.toObject(includeInstance, f),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.block.ProtoTransaction}
 */
proto.block.ProtoTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.block.ProtoTransaction;
  return proto.block.ProtoTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.block.ProtoTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.block.ProtoTransaction}
 */
proto.block.ProtoTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTo(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGas(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChainId(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGasFeeCap(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGasTipCap(value);
      break;
    case 10:
      var value = new proto.block.ProtoAccessList;
      reader.readMessage(value,proto.block.ProtoAccessList.deserializeBinaryFromReader);
      msg.setAccessList(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEtxGasLimit(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEtxGasPrice(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEtxGasTip(value);
      break;
    case 14:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEtxData(value);
      break;
    case 15:
      var value = new proto.block.ProtoAccessList;
      reader.readMessage(value,proto.block.ProtoAccessList.deserializeBinaryFromReader);
      msg.setEtxAccessList(value);
      break;
    case 16:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setV(value);
      break;
    case 17:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setR(value);
      break;
    case 18:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setS(value);
      break;
    case 19:
      var value = new proto_common_pb.ProtoHash;
      reader.readMessage(value,proto_common_pb.ProtoHash.deserializeBinaryFromReader);
      msg.setOriginatingTxHash(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEtxIndex(value);
      break;
    case 21:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEtxSender(value);
      break;
    case 22:
      var value = new proto.block.ProtoTxIns;
      reader.readMessage(value,proto.block.ProtoTxIns.deserializeBinaryFromReader);
      msg.setTxIns(value);
      break;
    case 23:
      var value = new proto.block.ProtoTxOuts;
      reader.readMessage(value,proto.block.ProtoTxOuts.deserializeBinaryFromReader);
      msg.setTxOuts(value);
      break;
    case 24:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.block.ProtoTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.block.ProtoTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.block.ProtoTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block.ProtoTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getAccessList();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.block.ProtoAccessList.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeUint64(
      11,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeBytes(
      12,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeBytes(
      14,
      f
    );
  }
  f = message.getEtxAccessList();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.block.ProtoAccessList.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeBytes(
      16,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeBytes(
      17,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeBytes(
      18,
      f
    );
  }
  f = message.getOriginatingTxHash();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto_common_pb.ProtoHash.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeUint32(
      20,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeBytes(
      21,
      f
    );
  }
  f = message.getTxIns();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.block.ProtoTxIns.serializeBinaryToWriter
    );
  }
  f = message.getTxOuts();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.block.ProtoTxOuts.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 24));
  if (f != null) {
    writer.writeBytes(
      24,
      f
    );
  }
};


/**
 * optional uint64 type = 1;
 * @return {number}
 */
proto.block.ProtoTransaction.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.block.ProtoTransaction} returns this
 */
proto.block.ProtoTransaction.prototype.setType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.block.ProtoTransaction} returns this
 */
proto.block.ProtoTransaction.prototype.clearType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.block.ProtoTransaction.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes to = 2;
 * @return {string}
 */
proto.block.ProtoTransaction.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes to = 2;
 * This is a type-conversion wrapper around `getTo()`
 * @return {string}
 */
proto.block.ProtoTransaction.prototype.getTo_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTo()));
};


/**
 * optional bytes to = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTo()`
 * @return {!Uint8Array}
 */
proto.block.ProtoTransaction.prototype.getTo_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTo()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.block.ProtoTransaction} returns this
 */
proto.block.ProtoTransaction.prototype.setTo = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.block.ProtoTransaction} returns this
 */
proto.block.ProtoTransaction.prototype.clearTo = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.block.ProtoTransaction.prototype.hasTo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 nonce = 3;
 * @return {number}
 */
proto.block.ProtoTransaction.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.block.ProtoTransaction} returns this
 */
proto.block.ProtoTransaction.prototype.setNonce = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.block.ProtoTransaction} returns this
 */
proto.block.ProtoTransaction.prototype.clearNonce = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.block.ProtoTransaction.prototype.hasNonce = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes value = 4;
 * @return {string}
 */
proto.block.ProtoTransaction.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes value = 4;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.block.ProtoTransaction.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.block.ProtoTransaction.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.block.ProtoTransaction} returns this
 */
proto.block.ProtoTransaction.prototype.setValue = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.block.ProtoTransaction} returns this
 */
proto.block.ProtoTransaction.prototype.clearValue = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.block.ProtoTransaction.prototype.hasValue = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint64 gas = 5;
 * @return {number}
 */
proto.block.ProtoTransaction.prototype.getGas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.block.ProtoTransaction} returns this
 */
proto.block.ProtoTransaction.prototype.setGas = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.block.ProtoTransaction} returns this
 */
proto.block.ProtoTransaction.prototype.clearGas = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.block.ProtoTransaction.prototype.hasGas = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bytes data = 6;
 * @return {string}
 */
proto.block.ProtoTransaction.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes data = 6;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.block.ProtoTransaction.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.block.ProtoTransaction.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.block.ProtoTransaction} returns this
 */
proto.block.ProtoTransaction.prototype.setData = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.block.ProtoTransaction} returns this
 */
proto.block.ProtoTransaction.prototype.clearData = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.block.ProtoTransaction.prototype.hasData = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bytes chain_id = 7;
 * @return {string}
 */
proto.block.ProtoTransaction.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes chain_id = 7;
 * This is a type-conversion wrapper around `getChainId()`
 * @return {string}
 */
proto.block.ProtoTransaction.prototype.getChainId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChainId()));
};


/**
 * optional bytes chain_id = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChainId()`
 * @return {!Uint8Array}
 */
proto.block.ProtoTransaction.prototype.getChainId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChainId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.block.ProtoTransaction} returns this
 */
proto.block.ProtoTransaction.prototype.setChainId = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.block.ProtoTransaction} returns this
 */
proto.block.ProtoTransaction.prototype.clearChainId = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.block.ProtoTransaction.prototype.hasChainId = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bytes gas_fee_cap = 8;
 * @return {string}
 */
proto.block.ProtoTransaction.prototype.getGasFeeCap = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes gas_fee_cap = 8;
 * This is a type-conversion wrapper around `getGasFeeCap()`
 * @return {string}
 */
proto.block.ProtoTransaction.prototype.getGasFeeCap_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGasFeeCap()));
};


/**
 * optional bytes gas_fee_cap = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGasFeeCap()`
 * @return {!Uint8Array}
 */
proto.block.ProtoTransaction.prototype.getGasFeeCap_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGasFeeCap()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.block.ProtoTransaction} returns this
 */
proto.block.ProtoTransaction.prototype.setGasFeeCap = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.block.ProtoTransaction} returns this
 */
proto.block.ProtoTransaction.prototype.clearGasFeeCap = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.block.ProtoTransaction.prototype.hasGasFeeCap = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bytes gas_tip_cap = 9;
 * @return {string}
 */
proto.block.ProtoTransaction.prototype.getGasTipCap = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes gas_tip_cap = 9;
 * This is a type-conversion wrapper around `getGasTipCap()`
 * @return {string}
 */
proto.block.ProtoTransaction.prototype.getGasTipCap_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGasTipCap()));
};


/**
 * optional bytes gas_tip_cap = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGasTipCap()`
 * @return {!Uint8Array}
 */
proto.block.ProtoTransaction.prototype.getGasTipCap_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGasTipCap()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.block.ProtoTransaction} returns this
 */
proto.block.ProtoTransaction.prototype.setGasTipCap = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.block.ProtoTransaction} returns this
 */
proto.block.ProtoTransaction.prototype.clearGasTipCap = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.block.ProtoTransaction.prototype.hasGasTipCap = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional ProtoAccessList access_list = 10;
 * @return {?proto.block.ProtoAccessList}
 */
proto.block.ProtoTransaction.prototype.getAccessList = function() {
  return /** @type{?proto.block.ProtoAccessList} */ (
    jspb.Message.getWrapperField(this, proto.block.ProtoAccessList, 10));
};


/**
 * @param {?proto.block.ProtoAccessList|undefined} value
 * @return {!proto.block.ProtoTransaction} returns this
*/
proto.block.ProtoTransaction.prototype.setAccessList = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.block.ProtoTransaction} returns this
 */
proto.block.ProtoTransaction.prototype.clearAccessList = function() {
  return this.setAccessList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.block.ProtoTransaction.prototype.hasAccessList = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional uint64 etx_gas_limit = 11;
 * @return {number}
 */
proto.block.ProtoTransaction.prototype.getEtxGasLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.block.ProtoTransaction} returns this
 */
proto.block.ProtoTransaction.prototype.setEtxGasLimit = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.block.ProtoTransaction} returns this
 */
proto.block.ProtoTransaction.prototype.clearEtxGasLimit = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.block.ProtoTransaction.prototype.hasEtxGasLimit = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional bytes etx_gas_price = 12;
 * @return {string}
 */
proto.block.ProtoTransaction.prototype.getEtxGasPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes etx_gas_price = 12;
 * This is a type-conversion wrapper around `getEtxGasPrice()`
 * @return {string}
 */
proto.block.ProtoTransaction.prototype.getEtxGasPrice_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEtxGasPrice()));
};


/**
 * optional bytes etx_gas_price = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEtxGasPrice()`
 * @return {!Uint8Array}
 */
proto.block.ProtoTransaction.prototype.getEtxGasPrice_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEtxGasPrice()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.block.ProtoTransaction} returns this
 */
proto.block.ProtoTransaction.prototype.setEtxGasPrice = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.block.ProtoTransaction} returns this
 */
proto.block.ProtoTransaction.prototype.clearEtxGasPrice = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.block.ProtoTransaction.prototype.hasEtxGasPrice = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional bytes etx_gas_tip = 13;
 * @return {string}
 */
proto.block.ProtoTransaction.prototype.getEtxGasTip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes etx_gas_tip = 13;
 * This is a type-conversion wrapper around `getEtxGasTip()`
 * @return {string}
 */
proto.block.ProtoTransaction.prototype.getEtxGasTip_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEtxGasTip()));
};


/**
 * optional bytes etx_gas_tip = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEtxGasTip()`
 * @return {!Uint8Array}
 */
proto.block.ProtoTransaction.prototype.getEtxGasTip_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEtxGasTip()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.block.ProtoTransaction} returns this
 */
proto.block.ProtoTransaction.prototype.setEtxGasTip = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.block.ProtoTransaction} returns this
 */
proto.block.ProtoTransaction.prototype.clearEtxGasTip = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.block.ProtoTransaction.prototype.hasEtxGasTip = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional bytes etx_data = 14;
 * @return {string}
 */
proto.block.ProtoTransaction.prototype.getEtxData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * optional bytes etx_data = 14;
 * This is a type-conversion wrapper around `getEtxData()`
 * @return {string}
 */
proto.block.ProtoTransaction.prototype.getEtxData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEtxData()));
};


/**
 * optional bytes etx_data = 14;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEtxData()`
 * @return {!Uint8Array}
 */
proto.block.ProtoTransaction.prototype.getEtxData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEtxData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.block.ProtoTransaction} returns this
 */
proto.block.ProtoTransaction.prototype.setEtxData = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.block.ProtoTransaction} returns this
 */
proto.block.ProtoTransaction.prototype.clearEtxData = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.block.ProtoTransaction.prototype.hasEtxData = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional ProtoAccessList etx_access_list = 15;
 * @return {?proto.block.ProtoAccessList}
 */
proto.block.ProtoTransaction.prototype.getEtxAccessList = function() {
  return /** @type{?proto.block.ProtoAccessList} */ (
    jspb.Message.getWrapperField(this, proto.block.ProtoAccessList, 15));
};


/**
 * @param {?proto.block.ProtoAccessList|undefined} value
 * @return {!proto.block.ProtoTransaction} returns this
*/
proto.block.ProtoTransaction.prototype.setEtxAccessList = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.block.ProtoTransaction} returns this
 */
proto.block.ProtoTransaction.prototype.clearEtxAccessList = function() {
  return this.setEtxAccessList(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.block.ProtoTransaction.prototype.hasEtxAccessList = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional bytes v = 16;
 * @return {string}
 */
proto.block.ProtoTransaction.prototype.getV = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * optional bytes v = 16;
 * This is a type-conversion wrapper around `getV()`
 * @return {string}
 */
proto.block.ProtoTransaction.prototype.getV_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getV()));
};


/**
 * optional bytes v = 16;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getV()`
 * @return {!Uint8Array}
 */
proto.block.ProtoTransaction.prototype.getV_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getV()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.block.ProtoTransaction} returns this
 */
proto.block.ProtoTransaction.prototype.setV = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.block.ProtoTransaction} returns this
 */
proto.block.ProtoTransaction.prototype.clearV = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.block.ProtoTransaction.prototype.hasV = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional bytes r = 17;
 * @return {string}
 */
proto.block.ProtoTransaction.prototype.getR = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * optional bytes r = 17;
 * This is a type-conversion wrapper around `getR()`
 * @return {string}
 */
proto.block.ProtoTransaction.prototype.getR_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getR()));
};


/**
 * optional bytes r = 17;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getR()`
 * @return {!Uint8Array}
 */
proto.block.ProtoTransaction.prototype.getR_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getR()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.block.ProtoTransaction} returns this
 */
proto.block.ProtoTransaction.prototype.setR = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.block.ProtoTransaction} returns this
 */
proto.block.ProtoTransaction.prototype.clearR = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.block.ProtoTransaction.prototype.hasR = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional bytes s = 18;
 * @return {string}
 */
proto.block.ProtoTransaction.prototype.getS = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * optional bytes s = 18;
 * This is a type-conversion wrapper around `getS()`
 * @return {string}
 */
proto.block.ProtoTransaction.prototype.getS_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getS()));
};


/**
 * optional bytes s = 18;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getS()`
 * @return {!Uint8Array}
 */
proto.block.ProtoTransaction.prototype.getS_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getS()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.block.ProtoTransaction} returns this
 */
proto.block.ProtoTransaction.prototype.setS = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.block.ProtoTransaction} returns this
 */
proto.block.ProtoTransaction.prototype.clearS = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.block.ProtoTransaction.prototype.hasS = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional common.ProtoHash originating_tx_hash = 19;
 * @return {?proto.common.ProtoHash}
 */
proto.block.ProtoTransaction.prototype.getOriginatingTxHash = function() {
  return /** @type{?proto.common.ProtoHash} */ (
    jspb.Message.getWrapperField(this, proto_common_pb.ProtoHash, 19));
};


/**
 * @param {?proto.common.ProtoHash|undefined} value
 * @return {!proto.block.ProtoTransaction} returns this
*/
proto.block.ProtoTransaction.prototype.setOriginatingTxHash = function(value) {
  return jspb.Message.setWrapperField(this, 19, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.block.ProtoTransaction} returns this
 */
proto.block.ProtoTransaction.prototype.clearOriginatingTxHash = function() {
  return this.setOriginatingTxHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.block.ProtoTransaction.prototype.hasOriginatingTxHash = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional uint32 etx_index = 20;
 * @return {number}
 */
proto.block.ProtoTransaction.prototype.getEtxIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.block.ProtoTransaction} returns this
 */
proto.block.ProtoTransaction.prototype.setEtxIndex = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.block.ProtoTransaction} returns this
 */
proto.block.ProtoTransaction.prototype.clearEtxIndex = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.block.ProtoTransaction.prototype.hasEtxIndex = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional bytes etx_sender = 21;
 * @return {string}
 */
proto.block.ProtoTransaction.prototype.getEtxSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/**
 * optional bytes etx_sender = 21;
 * This is a type-conversion wrapper around `getEtxSender()`
 * @return {string}
 */
proto.block.ProtoTransaction.prototype.getEtxSender_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEtxSender()));
};


/**
 * optional bytes etx_sender = 21;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEtxSender()`
 * @return {!Uint8Array}
 */
proto.block.ProtoTransaction.prototype.getEtxSender_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEtxSender()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.block.ProtoTransaction} returns this
 */
proto.block.ProtoTransaction.prototype.setEtxSender = function(value) {
  return jspb.Message.setField(this, 21, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.block.ProtoTransaction} returns this
 */
proto.block.ProtoTransaction.prototype.clearEtxSender = function() {
  return jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.block.ProtoTransaction.prototype.hasEtxSender = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional ProtoTxIns tx_ins = 22;
 * @return {?proto.block.ProtoTxIns}
 */
proto.block.ProtoTransaction.prototype.getTxIns = function() {
  return /** @type{?proto.block.ProtoTxIns} */ (
    jspb.Message.getWrapperField(this, proto.block.ProtoTxIns, 22));
};


/**
 * @param {?proto.block.ProtoTxIns|undefined} value
 * @return {!proto.block.ProtoTransaction} returns this
*/
proto.block.ProtoTransaction.prototype.setTxIns = function(value) {
  return jspb.Message.setWrapperField(this, 22, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.block.ProtoTransaction} returns this
 */
proto.block.ProtoTransaction.prototype.clearTxIns = function() {
  return this.setTxIns(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.block.ProtoTransaction.prototype.hasTxIns = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional ProtoTxOuts tx_outs = 23;
 * @return {?proto.block.ProtoTxOuts}
 */
proto.block.ProtoTransaction.prototype.getTxOuts = function() {
  return /** @type{?proto.block.ProtoTxOuts} */ (
    jspb.Message.getWrapperField(this, proto.block.ProtoTxOuts, 23));
};


/**
 * @param {?proto.block.ProtoTxOuts|undefined} value
 * @return {!proto.block.ProtoTransaction} returns this
*/
proto.block.ProtoTransaction.prototype.setTxOuts = function(value) {
  return jspb.Message.setWrapperField(this, 23, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.block.ProtoTransaction} returns this
 */
proto.block.ProtoTransaction.prototype.clearTxOuts = function() {
  return this.setTxOuts(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.block.ProtoTransaction.prototype.hasTxOuts = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional bytes signature = 24;
 * @return {string}
 */
proto.block.ProtoTransaction.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 24, ""));
};


/**
 * optional bytes signature = 24;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.block.ProtoTransaction.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 24;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.block.ProtoTransaction.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.block.ProtoTransaction} returns this
 */
proto.block.ProtoTransaction.prototype.setSignature = function(value) {
  return jspb.Message.setField(this, 24, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.block.ProtoTransaction} returns this
 */
proto.block.ProtoTransaction.prototype.clearSignature = function() {
  return jspb.Message.setField(this, 24, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.block.ProtoTransaction.prototype.hasSignature = function() {
  return jspb.Message.getField(this, 24) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.block.ProtoAccessList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.block.ProtoAccessList.prototype.toObject = function(opt_includeInstance) {
  return proto.block.ProtoAccessList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.block.ProtoAccessList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block.ProtoAccessList.toObject = function(includeInstance, msg) {
  var f, obj = {
    accessTuplesList: jspb.Message.toObjectList(msg.getAccessTuplesList(),
    proto.block.ProtoAccessTuple.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.block.ProtoAccessList}
 */
proto.block.ProtoAccessList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.block.ProtoAccessList;
  return proto.block.ProtoAccessList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.block.ProtoAccessList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.block.ProtoAccessList}
 */
proto.block.ProtoAccessList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.block.ProtoAccessTuple;
      reader.readMessage(value,proto.block.ProtoAccessTuple.deserializeBinaryFromReader);
      msg.addAccessTuples(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.block.ProtoAccessList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.block.ProtoAccessList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.block.ProtoAccessList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block.ProtoAccessList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccessTuplesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.block.ProtoAccessTuple.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ProtoAccessTuple access_tuples = 1;
 * @return {!Array<!proto.block.ProtoAccessTuple>}
 */
proto.block.ProtoAccessList.prototype.getAccessTuplesList = function() {
  return /** @type{!Array<!proto.block.ProtoAccessTuple>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.block.ProtoAccessTuple, 1));
};


/**
 * @param {!Array<!proto.block.ProtoAccessTuple>} value
 * @return {!proto.block.ProtoAccessList} returns this
*/
proto.block.ProtoAccessList.prototype.setAccessTuplesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.block.ProtoAccessTuple=} opt_value
 * @param {number=} opt_index
 * @return {!proto.block.ProtoAccessTuple}
 */
proto.block.ProtoAccessList.prototype.addAccessTuples = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.block.ProtoAccessTuple, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.block.ProtoAccessList} returns this
 */
proto.block.ProtoAccessList.prototype.clearAccessTuplesList = function() {
  return this.setAccessTuplesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.block.ProtoTxIns.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.block.ProtoTxIns.prototype.toObject = function(opt_includeInstance) {
  return proto.block.ProtoTxIns.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.block.ProtoTxIns} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block.ProtoTxIns.toObject = function(includeInstance, msg) {
  var f, obj = {
    txInsList: jspb.Message.toObjectList(msg.getTxInsList(),
    proto.block.ProtoTxIn.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.block.ProtoTxIns}
 */
proto.block.ProtoTxIns.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.block.ProtoTxIns;
  return proto.block.ProtoTxIns.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.block.ProtoTxIns} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.block.ProtoTxIns}
 */
proto.block.ProtoTxIns.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.block.ProtoTxIn;
      reader.readMessage(value,proto.block.ProtoTxIn.deserializeBinaryFromReader);
      msg.addTxIns(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.block.ProtoTxIns.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.block.ProtoTxIns.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.block.ProtoTxIns} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block.ProtoTxIns.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxInsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.block.ProtoTxIn.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ProtoTxIn tx_ins = 1;
 * @return {!Array<!proto.block.ProtoTxIn>}
 */
proto.block.ProtoTxIns.prototype.getTxInsList = function() {
  return /** @type{!Array<!proto.block.ProtoTxIn>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.block.ProtoTxIn, 1));
};


/**
 * @param {!Array<!proto.block.ProtoTxIn>} value
 * @return {!proto.block.ProtoTxIns} returns this
*/
proto.block.ProtoTxIns.prototype.setTxInsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.block.ProtoTxIn=} opt_value
 * @param {number=} opt_index
 * @return {!proto.block.ProtoTxIn}
 */
proto.block.ProtoTxIns.prototype.addTxIns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.block.ProtoTxIn, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.block.ProtoTxIns} returns this
 */
proto.block.ProtoTxIns.prototype.clearTxInsList = function() {
  return this.setTxInsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.block.ProtoTxOuts.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.block.ProtoTxOuts.prototype.toObject = function(opt_includeInstance) {
  return proto.block.ProtoTxOuts.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.block.ProtoTxOuts} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block.ProtoTxOuts.toObject = function(includeInstance, msg) {
  var f, obj = {
    txOutsList: jspb.Message.toObjectList(msg.getTxOutsList(),
    proto.block.ProtoTxOut.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.block.ProtoTxOuts}
 */
proto.block.ProtoTxOuts.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.block.ProtoTxOuts;
  return proto.block.ProtoTxOuts.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.block.ProtoTxOuts} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.block.ProtoTxOuts}
 */
proto.block.ProtoTxOuts.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.block.ProtoTxOut;
      reader.readMessage(value,proto.block.ProtoTxOut.deserializeBinaryFromReader);
      msg.addTxOuts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.block.ProtoTxOuts.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.block.ProtoTxOuts.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.block.ProtoTxOuts} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block.ProtoTxOuts.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxOutsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.block.ProtoTxOut.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ProtoTxOut tx_outs = 1;
 * @return {!Array<!proto.block.ProtoTxOut>}
 */
proto.block.ProtoTxOuts.prototype.getTxOutsList = function() {
  return /** @type{!Array<!proto.block.ProtoTxOut>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.block.ProtoTxOut, 1));
};


/**
 * @param {!Array<!proto.block.ProtoTxOut>} value
 * @return {!proto.block.ProtoTxOuts} returns this
*/
proto.block.ProtoTxOuts.prototype.setTxOutsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.block.ProtoTxOut=} opt_value
 * @param {number=} opt_index
 * @return {!proto.block.ProtoTxOut}
 */
proto.block.ProtoTxOuts.prototype.addTxOuts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.block.ProtoTxOut, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.block.ProtoTxOuts} returns this
 */
proto.block.ProtoTxOuts.prototype.clearTxOutsList = function() {
  return this.setTxOutsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.block.ProtoTxIn.prototype.toObject = function(opt_includeInstance) {
  return proto.block.ProtoTxIn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.block.ProtoTxIn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block.ProtoTxIn.toObject = function(includeInstance, msg) {
  var f, obj = {
    previousOutPoint: (f = msg.getPreviousOutPoint()) && proto.block.ProtoOutPoint.toObject(includeInstance, f),
    pubKey: msg.getPubKey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.block.ProtoTxIn}
 */
proto.block.ProtoTxIn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.block.ProtoTxIn;
  return proto.block.ProtoTxIn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.block.ProtoTxIn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.block.ProtoTxIn}
 */
proto.block.ProtoTxIn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.block.ProtoOutPoint;
      reader.readMessage(value,proto.block.ProtoOutPoint.deserializeBinaryFromReader);
      msg.setPreviousOutPoint(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.block.ProtoTxIn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.block.ProtoTxIn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.block.ProtoTxIn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block.ProtoTxIn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPreviousOutPoint();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.block.ProtoOutPoint.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional ProtoOutPoint previous_out_point = 1;
 * @return {?proto.block.ProtoOutPoint}
 */
proto.block.ProtoTxIn.prototype.getPreviousOutPoint = function() {
  return /** @type{?proto.block.ProtoOutPoint} */ (
    jspb.Message.getWrapperField(this, proto.block.ProtoOutPoint, 1));
};


/**
 * @param {?proto.block.ProtoOutPoint|undefined} value
 * @return {!proto.block.ProtoTxIn} returns this
*/
proto.block.ProtoTxIn.prototype.setPreviousOutPoint = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.block.ProtoTxIn} returns this
 */
proto.block.ProtoTxIn.prototype.clearPreviousOutPoint = function() {
  return this.setPreviousOutPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.block.ProtoTxIn.prototype.hasPreviousOutPoint = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes pub_key = 2;
 * @return {string}
 */
proto.block.ProtoTxIn.prototype.getPubKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes pub_key = 2;
 * This is a type-conversion wrapper around `getPubKey()`
 * @return {string}
 */
proto.block.ProtoTxIn.prototype.getPubKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubKey()));
};


/**
 * optional bytes pub_key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubKey()`
 * @return {!Uint8Array}
 */
proto.block.ProtoTxIn.prototype.getPubKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.block.ProtoTxIn} returns this
 */
proto.block.ProtoTxIn.prototype.setPubKey = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.block.ProtoTxIn} returns this
 */
proto.block.ProtoTxIn.prototype.clearPubKey = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.block.ProtoTxIn.prototype.hasPubKey = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.block.ProtoOutPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.block.ProtoOutPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.block.ProtoOutPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block.ProtoOutPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: (f = msg.getHash()) && proto_common_pb.ProtoHash.toObject(includeInstance, f),
    index: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.block.ProtoOutPoint}
 */
proto.block.ProtoOutPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.block.ProtoOutPoint;
  return proto.block.ProtoOutPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.block.ProtoOutPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.block.ProtoOutPoint}
 */
proto.block.ProtoOutPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_common_pb.ProtoHash;
      reader.readMessage(value,proto_common_pb.ProtoHash.deserializeBinaryFromReader);
      msg.setHash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.block.ProtoOutPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.block.ProtoOutPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.block.ProtoOutPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block.ProtoOutPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_common_pb.ProtoHash.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional common.ProtoHash hash = 1;
 * @return {?proto.common.ProtoHash}
 */
proto.block.ProtoOutPoint.prototype.getHash = function() {
  return /** @type{?proto.common.ProtoHash} */ (
    jspb.Message.getWrapperField(this, proto_common_pb.ProtoHash, 1));
};


/**
 * @param {?proto.common.ProtoHash|undefined} value
 * @return {!proto.block.ProtoOutPoint} returns this
*/
proto.block.ProtoOutPoint.prototype.setHash = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.block.ProtoOutPoint} returns this
 */
proto.block.ProtoOutPoint.prototype.clearHash = function() {
  return this.setHash(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.block.ProtoOutPoint.prototype.hasHash = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 index = 2;
 * @return {number}
 */
proto.block.ProtoOutPoint.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.block.ProtoOutPoint} returns this
 */
proto.block.ProtoOutPoint.prototype.setIndex = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.block.ProtoOutPoint} returns this
 */
proto.block.ProtoOutPoint.prototype.clearIndex = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.block.ProtoOutPoint.prototype.hasIndex = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.block.ProtoTxOut.prototype.toObject = function(opt_includeInstance) {
  return proto.block.ProtoTxOut.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.block.ProtoTxOut} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block.ProtoTxOut.toObject = function(includeInstance, msg) {
  var f, obj = {
    denomination: jspb.Message.getFieldWithDefault(msg, 1, 0),
    address: msg.getAddress_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.block.ProtoTxOut}
 */
proto.block.ProtoTxOut.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.block.ProtoTxOut;
  return proto.block.ProtoTxOut.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.block.ProtoTxOut} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.block.ProtoTxOut}
 */
proto.block.ProtoTxOut.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDenomination(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.block.ProtoTxOut.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.block.ProtoTxOut.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.block.ProtoTxOut} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block.ProtoTxOut.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional uint32 denomination = 1;
 * @return {number}
 */
proto.block.ProtoTxOut.prototype.getDenomination = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.block.ProtoTxOut} returns this
 */
proto.block.ProtoTxOut.prototype.setDenomination = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.block.ProtoTxOut} returns this
 */
proto.block.ProtoTxOut.prototype.clearDenomination = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.block.ProtoTxOut.prototype.hasDenomination = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes address = 2;
 * @return {string}
 */
proto.block.ProtoTxOut.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes address = 2;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.block.ProtoTxOut.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes address = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.block.ProtoTxOut.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.block.ProtoTxOut} returns this
 */
proto.block.ProtoTxOut.prototype.setAddress = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.block.ProtoTxOut} returns this
 */
proto.block.ProtoTxOut.prototype.clearAddress = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.block.ProtoTxOut.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.block.ProtoAccessTuple.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.block.ProtoAccessTuple.prototype.toObject = function(opt_includeInstance) {
  return proto.block.ProtoAccessTuple.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.block.ProtoAccessTuple} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block.ProtoAccessTuple.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: msg.getAddress_asB64(),
    storageKeyList: jspb.Message.toObjectList(msg.getStorageKeyList(),
    proto_common_pb.ProtoHash.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.block.ProtoAccessTuple}
 */
proto.block.ProtoAccessTuple.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.block.ProtoAccessTuple;
  return proto.block.ProtoAccessTuple.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.block.ProtoAccessTuple} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.block.ProtoAccessTuple}
 */
proto.block.ProtoAccessTuple.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddress(value);
      break;
    case 2:
      var value = new proto_common_pb.ProtoHash;
      reader.readMessage(value,proto_common_pb.ProtoHash.deserializeBinaryFromReader);
      msg.addStorageKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.block.ProtoAccessTuple.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.block.ProtoAccessTuple.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.block.ProtoAccessTuple} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.block.ProtoAccessTuple.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getStorageKeyList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto_common_pb.ProtoHash.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes address = 1;
 * @return {string}
 */
proto.block.ProtoAccessTuple.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes address = 1;
 * This is a type-conversion wrapper around `getAddress()`
 * @return {string}
 */
proto.block.ProtoAccessTuple.prototype.getAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddress()));
};


/**
 * optional bytes address = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddress()`
 * @return {!Uint8Array}
 */
proto.block.ProtoAccessTuple.prototype.getAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.block.ProtoAccessTuple} returns this
 */
proto.block.ProtoAccessTuple.prototype.setAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated common.ProtoHash storage_key = 2;
 * @return {!Array<!proto.common.ProtoHash>}
 */
proto.block.ProtoAccessTuple.prototype.getStorageKeyList = function() {
  return /** @type{!Array<!proto.common.ProtoHash>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto_common_pb.ProtoHash, 2));
};


/**
 * @param {!Array<!proto.common.ProtoHash>} value
 * @return {!proto.block.ProtoAccessTuple} returns this
*/
proto.block.ProtoAccessTuple.prototype.setStorageKeyList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.common.ProtoHash=} opt_value
 * @param {number=} opt_index
 * @return {!proto.common.ProtoHash}
 */
proto.block.ProtoAccessTuple.prototype.addStorageKey = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.common.ProtoHash, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.block.ProtoAccessTuple} returns this
 */
proto.block.ProtoAccessTuple.prototype.clearStorageKeyList = function() {
  return this.setStorageKeyList([]);
};


goog.object.extend(exports, proto.block);

/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: proto-block.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./proto_common";
import * as pb_1 from "google-protobuf";
export namespace block {
    export class ProtoTransaction extends pb_1.Message {
        one_of_decls: number[][] = [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20], [21], [22], [23], [24]];
        constructor(data?: any[] | ({} & (({
            type?: number;
        }) | ({
            to?: Uint8Array;
        }) | ({
            nonce?: number;
        }) | ({
            value?: Uint8Array;
        }) | ({
            gas?: number;
        }) | ({
            data?: Uint8Array;
        }) | ({
            chain_id?: Uint8Array;
        }) | ({
            gas_fee_cap?: Uint8Array;
        }) | ({
            gas_tip_cap?: Uint8Array;
        }) | ({
            access_list?: ProtoAccessList;
        }) | ({
            etx_gas_limit?: number;
        }) | ({
            etx_gas_price?: Uint8Array;
        }) | ({
            etx_gas_tip?: Uint8Array;
        }) | ({
            etx_data?: Uint8Array;
        }) | ({
            etx_access_list?: ProtoAccessList;
        }) | ({
            v?: Uint8Array;
        }) | ({
            r?: Uint8Array;
        }) | ({
            s?: Uint8Array;
        }) | ({
            originating_tx_hash?: dependency_1.common.ProtoHash;
        }) | ({
            etx_index?: number;
        }) | ({
            etx_sender?: Uint8Array;
        }) | ({
            tx_ins?: ProtoTxIns;
        }) | ({
            tx_outs?: ProtoTxOuts;
        }) | ({
            signature?: Uint8Array;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("to" in data && data.to != undefined) {
                    this.to = data.to;
                }
                if ("nonce" in data && data.nonce != undefined) {
                    this.nonce = data.nonce;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
                if ("gas" in data && data.gas != undefined) {
                    this.gas = data.gas;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("chain_id" in data && data.chain_id != undefined) {
                    this.chain_id = data.chain_id;
                }
                if ("gas_fee_cap" in data && data.gas_fee_cap != undefined) {
                    this.gas_fee_cap = data.gas_fee_cap;
                }
                if ("gas_tip_cap" in data && data.gas_tip_cap != undefined) {
                    this.gas_tip_cap = data.gas_tip_cap;
                }
                if ("access_list" in data && data.access_list != undefined) {
                    this.access_list = data.access_list;
                }
                if ("etx_gas_limit" in data && data.etx_gas_limit != undefined) {
                    this.etx_gas_limit = data.etx_gas_limit;
                }
                if ("etx_gas_price" in data && data.etx_gas_price != undefined) {
                    this.etx_gas_price = data.etx_gas_price;
                }
                if ("etx_gas_tip" in data && data.etx_gas_tip != undefined) {
                    this.etx_gas_tip = data.etx_gas_tip;
                }
                if ("etx_data" in data && data.etx_data != undefined) {
                    this.etx_data = data.etx_data;
                }
                if ("etx_access_list" in data && data.etx_access_list != undefined) {
                    this.etx_access_list = data.etx_access_list;
                }
                if ("v" in data && data.v != undefined) {
                    this.v = data.v;
                }
                if ("r" in data && data.r != undefined) {
                    this.r = data.r;
                }
                if ("s" in data && data.s != undefined) {
                    this.s = data.s;
                }
                if ("originating_tx_hash" in data && data.originating_tx_hash != undefined) {
                    this.originating_tx_hash = data.originating_tx_hash;
                }
                if ("etx_index" in data && data.etx_index != undefined) {
                    this.etx_index = data.etx_index;
                }
                if ("etx_sender" in data && data.etx_sender != undefined) {
                    this.etx_sender = data.etx_sender;
                }
                if ("tx_ins" in data && data.tx_ins != undefined) {
                    this.tx_ins = data.tx_ins;
                }
                if ("tx_outs" in data && data.tx_outs != undefined) {
                    this.tx_outs = data.tx_outs;
                }
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set type(value: number) {
            pb_1.Message.setOneofField(this, 1, this.one_of_decls[0], value);
        }
        get has_type() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get to() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set to(value: Uint8Array) {
            pb_1.Message.setOneofField(this, 2, this.one_of_decls[1], value);
        }
        get has_to() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get nonce() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set nonce(value: number) {
            pb_1.Message.setOneofField(this, 3, this.one_of_decls[2], value);
        }
        get has_nonce() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set value(value: Uint8Array) {
            pb_1.Message.setOneofField(this, 4, this.one_of_decls[3], value);
        }
        get has_value() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get gas() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set gas(value: number) {
            pb_1.Message.setOneofField(this, 5, this.one_of_decls[4], value);
        }
        get has_gas() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 6, new Uint8Array(0)) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setOneofField(this, 6, this.one_of_decls[5], value);
        }
        get has_data() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get chain_id() {
            return pb_1.Message.getFieldWithDefault(this, 7, new Uint8Array(0)) as Uint8Array;
        }
        set chain_id(value: Uint8Array) {
            pb_1.Message.setOneofField(this, 7, this.one_of_decls[6], value);
        }
        get has_chain_id() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get gas_fee_cap() {
            return pb_1.Message.getFieldWithDefault(this, 8, new Uint8Array(0)) as Uint8Array;
        }
        set gas_fee_cap(value: Uint8Array) {
            pb_1.Message.setOneofField(this, 8, this.one_of_decls[7], value);
        }
        get has_gas_fee_cap() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get gas_tip_cap() {
            return pb_1.Message.getFieldWithDefault(this, 9, new Uint8Array(0)) as Uint8Array;
        }
        set gas_tip_cap(value: Uint8Array) {
            pb_1.Message.setOneofField(this, 9, this.one_of_decls[8], value);
        }
        get has_gas_tip_cap() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get access_list() {
            return pb_1.Message.getWrapperField(this, ProtoAccessList, 10) as ProtoAccessList;
        }
        set access_list(value: ProtoAccessList) {
            pb_1.Message.setOneofWrapperField(this, 10, this.one_of_decls[9], value);
        }
        get has_access_list() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get etx_gas_limit() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set etx_gas_limit(value: number) {
            pb_1.Message.setOneofField(this, 11, this.one_of_decls[10], value);
        }
        get has_etx_gas_limit() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get etx_gas_price() {
            return pb_1.Message.getFieldWithDefault(this, 12, new Uint8Array(0)) as Uint8Array;
        }
        set etx_gas_price(value: Uint8Array) {
            pb_1.Message.setOneofField(this, 12, this.one_of_decls[11], value);
        }
        get has_etx_gas_price() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get etx_gas_tip() {
            return pb_1.Message.getFieldWithDefault(this, 13, new Uint8Array(0)) as Uint8Array;
        }
        set etx_gas_tip(value: Uint8Array) {
            pb_1.Message.setOneofField(this, 13, this.one_of_decls[12], value);
        }
        get has_etx_gas_tip() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get etx_data() {
            return pb_1.Message.getFieldWithDefault(this, 14, new Uint8Array(0)) as Uint8Array;
        }
        set etx_data(value: Uint8Array) {
            pb_1.Message.setOneofField(this, 14, this.one_of_decls[13], value);
        }
        get has_etx_data() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get etx_access_list() {
            return pb_1.Message.getWrapperField(this, ProtoAccessList, 15) as ProtoAccessList;
        }
        set etx_access_list(value: ProtoAccessList) {
            pb_1.Message.setOneofWrapperField(this, 15, this.one_of_decls[14], value);
        }
        get has_etx_access_list() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get v() {
            return pb_1.Message.getFieldWithDefault(this, 16, new Uint8Array(0)) as Uint8Array;
        }
        set v(value: Uint8Array) {
            pb_1.Message.setOneofField(this, 16, this.one_of_decls[15], value);
        }
        get has_v() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get r() {
            return pb_1.Message.getFieldWithDefault(this, 17, new Uint8Array(0)) as Uint8Array;
        }
        set r(value: Uint8Array) {
            pb_1.Message.setOneofField(this, 17, this.one_of_decls[16], value);
        }
        get has_r() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get s() {
            return pb_1.Message.getFieldWithDefault(this, 18, new Uint8Array(0)) as Uint8Array;
        }
        set s(value: Uint8Array) {
            pb_1.Message.setOneofField(this, 18, this.one_of_decls[17], value);
        }
        get has_s() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get originating_tx_hash() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.ProtoHash, 19) as dependency_1.common.ProtoHash;
        }
        set originating_tx_hash(value: dependency_1.common.ProtoHash) {
            pb_1.Message.setOneofWrapperField(this, 19, this.one_of_decls[18], value);
        }
        get has_originating_tx_hash() {
            return pb_1.Message.getField(this, 19) != null;
        }
        get etx_index() {
            return pb_1.Message.getFieldWithDefault(this, 20, 0) as number;
        }
        set etx_index(value: number) {
            pb_1.Message.setOneofField(this, 20, this.one_of_decls[19], value);
        }
        get has_etx_index() {
            return pb_1.Message.getField(this, 20) != null;
        }
        get etx_sender() {
            return pb_1.Message.getFieldWithDefault(this, 21, new Uint8Array(0)) as Uint8Array;
        }
        set etx_sender(value: Uint8Array) {
            pb_1.Message.setOneofField(this, 21, this.one_of_decls[20], value);
        }
        get has_etx_sender() {
            return pb_1.Message.getField(this, 21) != null;
        }
        get tx_ins() {
            return pb_1.Message.getWrapperField(this, ProtoTxIns, 22) as ProtoTxIns;
        }
        set tx_ins(value: ProtoTxIns) {
            pb_1.Message.setOneofWrapperField(this, 22, this.one_of_decls[21], value);
        }
        get has_tx_ins() {
            return pb_1.Message.getField(this, 22) != null;
        }
        get tx_outs() {
            return pb_1.Message.getWrapperField(this, ProtoTxOuts, 23) as ProtoTxOuts;
        }
        set tx_outs(value: ProtoTxOuts) {
            pb_1.Message.setOneofWrapperField(this, 23, this.one_of_decls[22], value);
        }
        get has_tx_outs() {
            return pb_1.Message.getField(this, 23) != null;
        }
        get signature() {
            return pb_1.Message.getFieldWithDefault(this, 24, new Uint8Array(0)) as Uint8Array;
        }
        set signature(value: Uint8Array) {
            pb_1.Message.setOneofField(this, 24, this.one_of_decls[23], value);
        }
        get has_signature() {
            return pb_1.Message.getField(this, 24) != null;
        }
        get _type() {
            const cases: {
                [index: number]: "none" | "type";
            } = {
                0: "none",
                1: "type"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _to() {
            const cases: {
                [index: number]: "none" | "to";
            } = {
                0: "none",
                2: "to"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _nonce() {
            const cases: {
                [index: number]: "none" | "nonce";
            } = {
                0: "none",
                3: "nonce"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _value() {
            const cases: {
                [index: number]: "none" | "value";
            } = {
                0: "none",
                4: "value"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        get _gas() {
            const cases: {
                [index: number]: "none" | "gas";
            } = {
                0: "none",
                5: "gas"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        get _data() {
            const cases: {
                [index: number]: "none" | "data";
            } = {
                0: "none",
                6: "data"
            };
            return cases[pb_1.Message.computeOneofCase(this, [6])];
        }
        get _chain_id() {
            const cases: {
                [index: number]: "none" | "chain_id";
            } = {
                0: "none",
                7: "chain_id"
            };
            return cases[pb_1.Message.computeOneofCase(this, [7])];
        }
        get _gas_fee_cap() {
            const cases: {
                [index: number]: "none" | "gas_fee_cap";
            } = {
                0: "none",
                8: "gas_fee_cap"
            };
            return cases[pb_1.Message.computeOneofCase(this, [8])];
        }
        get _gas_tip_cap() {
            const cases: {
                [index: number]: "none" | "gas_tip_cap";
            } = {
                0: "none",
                9: "gas_tip_cap"
            };
            return cases[pb_1.Message.computeOneofCase(this, [9])];
        }
        get _access_list() {
            const cases: {
                [index: number]: "none" | "access_list";
            } = {
                0: "none",
                10: "access_list"
            };
            return cases[pb_1.Message.computeOneofCase(this, [10])];
        }
        get _etx_gas_limit() {
            const cases: {
                [index: number]: "none" | "etx_gas_limit";
            } = {
                0: "none",
                11: "etx_gas_limit"
            };
            return cases[pb_1.Message.computeOneofCase(this, [11])];
        }
        get _etx_gas_price() {
            const cases: {
                [index: number]: "none" | "etx_gas_price";
            } = {
                0: "none",
                12: "etx_gas_price"
            };
            return cases[pb_1.Message.computeOneofCase(this, [12])];
        }
        get _etx_gas_tip() {
            const cases: {
                [index: number]: "none" | "etx_gas_tip";
            } = {
                0: "none",
                13: "etx_gas_tip"
            };
            return cases[pb_1.Message.computeOneofCase(this, [13])];
        }
        get _etx_data() {
            const cases: {
                [index: number]: "none" | "etx_data";
            } = {
                0: "none",
                14: "etx_data"
            };
            return cases[pb_1.Message.computeOneofCase(this, [14])];
        }
        get _etx_access_list() {
            const cases: {
                [index: number]: "none" | "etx_access_list";
            } = {
                0: "none",
                15: "etx_access_list"
            };
            return cases[pb_1.Message.computeOneofCase(this, [15])];
        }
        get _v() {
            const cases: {
                [index: number]: "none" | "v";
            } = {
                0: "none",
                16: "v"
            };
            return cases[pb_1.Message.computeOneofCase(this, [16])];
        }
        get _r() {
            const cases: {
                [index: number]: "none" | "r";
            } = {
                0: "none",
                17: "r"
            };
            return cases[pb_1.Message.computeOneofCase(this, [17])];
        }
        get _s() {
            const cases: {
                [index: number]: "none" | "s";
            } = {
                0: "none",
                18: "s"
            };
            return cases[pb_1.Message.computeOneofCase(this, [18])];
        }
        get _originating_tx_hash() {
            const cases: {
                [index: number]: "none" | "originating_tx_hash";
            } = {
                0: "none",
                19: "originating_tx_hash"
            };
            return cases[pb_1.Message.computeOneofCase(this, [19])];
        }
        get _etx_index() {
            const cases: {
                [index: number]: "none" | "etx_index";
            } = {
                0: "none",
                20: "etx_index"
            };
            return cases[pb_1.Message.computeOneofCase(this, [20])];
        }
        get _etx_sender() {
            const cases: {
                [index: number]: "none" | "etx_sender";
            } = {
                0: "none",
                21: "etx_sender"
            };
            return cases[pb_1.Message.computeOneofCase(this, [21])];
        }
        get _tx_ins() {
            const cases: {
                [index: number]: "none" | "tx_ins";
            } = {
                0: "none",
                22: "tx_ins"
            };
            return cases[pb_1.Message.computeOneofCase(this, [22])];
        }
        get _tx_outs() {
            const cases: {
                [index: number]: "none" | "tx_outs";
            } = {
                0: "none",
                23: "tx_outs"
            };
            return cases[pb_1.Message.computeOneofCase(this, [23])];
        }
        get _signature() {
            const cases: {
                [index: number]: "none" | "signature";
            } = {
                0: "none",
                24: "signature"
            };
            return cases[pb_1.Message.computeOneofCase(this, [24])];
        }
        static fromObject(data: {
            type?: number;
            to?: Uint8Array;
            nonce?: number;
            value?: Uint8Array;
            gas?: number;
            data?: Uint8Array;
            chain_id?: Uint8Array;
            gas_fee_cap?: Uint8Array;
            gas_tip_cap?: Uint8Array;
            access_list?: ReturnType<typeof ProtoAccessList.prototype.toObject>;
            etx_gas_limit?: number;
            etx_gas_price?: Uint8Array;
            etx_gas_tip?: Uint8Array;
            etx_data?: Uint8Array;
            etx_access_list?: ReturnType<typeof ProtoAccessList.prototype.toObject>;
            v?: Uint8Array;
            r?: Uint8Array;
            s?: Uint8Array;
            originating_tx_hash?: ReturnType<typeof dependency_1.common.ProtoHash.prototype.toObject>;
            etx_index?: number;
            etx_sender?: Uint8Array;
            tx_ins?: ReturnType<typeof ProtoTxIns.prototype.toObject>;
            tx_outs?: ReturnType<typeof ProtoTxOuts.prototype.toObject>;
            signature?: Uint8Array;
        }): ProtoTransaction {
            const message = new ProtoTransaction({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.to != null) {
                message.to = data.to;
            }
            if (data.nonce != null) {
                message.nonce = data.nonce;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            if (data.gas != null) {
                message.gas = data.gas;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            if (data.chain_id != null) {
                message.chain_id = data.chain_id;
            }
            if (data.gas_fee_cap != null) {
                message.gas_fee_cap = data.gas_fee_cap;
            }
            if (data.gas_tip_cap != null) {
                message.gas_tip_cap = data.gas_tip_cap;
            }
            if (data.access_list != null) {
                message.access_list = ProtoAccessList.fromObject(data.access_list);
            }
            if (data.etx_gas_limit != null) {
                message.etx_gas_limit = data.etx_gas_limit;
            }
            if (data.etx_gas_price != null) {
                message.etx_gas_price = data.etx_gas_price;
            }
            if (data.etx_gas_tip != null) {
                message.etx_gas_tip = data.etx_gas_tip;
            }
            if (data.etx_data != null) {
                message.etx_data = data.etx_data;
            }
            if (data.etx_access_list != null) {
                message.etx_access_list = ProtoAccessList.fromObject(data.etx_access_list);
            }
            if (data.v != null) {
                message.v = data.v;
            }
            if (data.r != null) {
                message.r = data.r;
            }
            if (data.s != null) {
                message.s = data.s;
            }
            if (data.originating_tx_hash != null) {
                message.originating_tx_hash = dependency_1.common.ProtoHash.fromObject(data.originating_tx_hash);
            }
            if (data.etx_index != null) {
                message.etx_index = data.etx_index;
            }
            if (data.etx_sender != null) {
                message.etx_sender = data.etx_sender;
            }
            if (data.tx_ins != null) {
                message.tx_ins = ProtoTxIns.fromObject(data.tx_ins);
            }
            if (data.tx_outs != null) {
                message.tx_outs = ProtoTxOuts.fromObject(data.tx_outs);
            }
            if (data.signature != null) {
                message.signature = data.signature;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: number;
                to?: Uint8Array;
                nonce?: number;
                value?: Uint8Array;
                gas?: number;
                data?: Uint8Array;
                chain_id?: Uint8Array;
                gas_fee_cap?: Uint8Array;
                gas_tip_cap?: Uint8Array;
                access_list?: ReturnType<typeof ProtoAccessList.prototype.toObject>;
                etx_gas_limit?: number;
                etx_gas_price?: Uint8Array;
                etx_gas_tip?: Uint8Array;
                etx_data?: Uint8Array;
                etx_access_list?: ReturnType<typeof ProtoAccessList.prototype.toObject>;
                v?: Uint8Array;
                r?: Uint8Array;
                s?: Uint8Array;
                originating_tx_hash?: ReturnType<typeof dependency_1.common.ProtoHash.prototype.toObject>;
                etx_index?: number;
                etx_sender?: Uint8Array;
                tx_ins?: ReturnType<typeof ProtoTxIns.prototype.toObject>;
                tx_outs?: ReturnType<typeof ProtoTxOuts.prototype.toObject>;
                signature?: Uint8Array;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.to != null) {
                data.to = this.to;
            }
            if (this.nonce != null) {
                data.nonce = this.nonce;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            if (this.gas != null) {
                data.gas = this.gas;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            if (this.chain_id != null) {
                data.chain_id = this.chain_id;
            }
            if (this.gas_fee_cap != null) {
                data.gas_fee_cap = this.gas_fee_cap;
            }
            if (this.gas_tip_cap != null) {
                data.gas_tip_cap = this.gas_tip_cap;
            }
            if (this.access_list != null) {
                data.access_list = this.access_list.toObject();
            }
            if (this.etx_gas_limit != null) {
                data.etx_gas_limit = this.etx_gas_limit;
            }
            if (this.etx_gas_price != null) {
                data.etx_gas_price = this.etx_gas_price;
            }
            if (this.etx_gas_tip != null) {
                data.etx_gas_tip = this.etx_gas_tip;
            }
            if (this.etx_data != null) {
                data.etx_data = this.etx_data;
            }
            if (this.etx_access_list != null) {
                data.etx_access_list = this.etx_access_list.toObject();
            }
            if (this.v != null) {
                data.v = this.v;
            }
            if (this.r != null) {
                data.r = this.r;
            }
            if (this.s != null) {
                data.s = this.s;
            }
            if (this.originating_tx_hash != null) {
                data.originating_tx_hash = this.originating_tx_hash.toObject();
            }
            if (this.etx_index != null) {
                data.etx_index = this.etx_index;
            }
            if (this.etx_sender != null) {
                data.etx_sender = this.etx_sender;
            }
            if (this.tx_ins != null) {
                data.tx_ins = this.tx_ins.toObject();
            }
            if (this.tx_outs != null) {
                data.tx_outs = this.tx_outs.toObject();
            }
            if (this.signature != null) {
                data.signature = this.signature;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_type)
                writer.writeUint64(1, this.type);
            if (this.has_to)
                writer.writeBytes(2, this.to);
            if (this.has_nonce)
                writer.writeUint64(3, this.nonce);
            if (this.has_value)
                writer.writeBytes(4, this.value);
            if (this.has_gas)
                writer.writeUint64(5, this.gas);
            if (this.has_data)
                writer.writeBytes(6, this.data);
            if (this.has_chain_id)
                writer.writeBytes(7, this.chain_id);
            if (this.has_gas_fee_cap)
                writer.writeBytes(8, this.gas_fee_cap);
            if (this.has_gas_tip_cap)
                writer.writeBytes(9, this.gas_tip_cap);
            if (this.has_access_list)
                writer.writeMessage(10, this.access_list, () => this.access_list.serialize(writer));
            if (this.has_etx_gas_limit)
                writer.writeUint64(11, this.etx_gas_limit);
            if (this.has_etx_gas_price)
                writer.writeBytes(12, this.etx_gas_price);
            if (this.has_etx_gas_tip)
                writer.writeBytes(13, this.etx_gas_tip);
            if (this.has_etx_data)
                writer.writeBytes(14, this.etx_data);
            if (this.has_etx_access_list)
                writer.writeMessage(15, this.etx_access_list, () => this.etx_access_list.serialize(writer));
            if (this.has_v)
                writer.writeBytes(16, this.v);
            if (this.has_r)
                writer.writeBytes(17, this.r);
            if (this.has_s)
                writer.writeBytes(18, this.s);
            if (this.has_originating_tx_hash)
                writer.writeMessage(19, this.originating_tx_hash, () => this.originating_tx_hash.serialize(writer));
            if (this.has_etx_index)
                writer.writeUint32(20, this.etx_index);
            if (this.has_etx_sender)
                writer.writeBytes(21, this.etx_sender);
            if (this.has_tx_ins)
                writer.writeMessage(22, this.tx_ins, () => this.tx_ins.serialize(writer));
            if (this.has_tx_outs)
                writer.writeMessage(23, this.tx_outs, () => this.tx_outs.serialize(writer));
            if (this.has_signature)
                writer.writeBytes(24, this.signature);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProtoTransaction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProtoTransaction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readUint64();
                        break;
                    case 2:
                        message.to = reader.readBytes();
                        break;
                    case 3:
                        message.nonce = reader.readUint64();
                        break;
                    case 4:
                        message.value = reader.readBytes();
                        break;
                    case 5:
                        message.gas = reader.readUint64();
                        break;
                    case 6:
                        message.data = reader.readBytes();
                        break;
                    case 7:
                        message.chain_id = reader.readBytes();
                        break;
                    case 8:
                        message.gas_fee_cap = reader.readBytes();
                        break;
                    case 9:
                        message.gas_tip_cap = reader.readBytes();
                        break;
                    case 10:
                        reader.readMessage(message.access_list, () => message.access_list = ProtoAccessList.deserialize(reader));
                        break;
                    case 11:
                        message.etx_gas_limit = reader.readUint64();
                        break;
                    case 12:
                        message.etx_gas_price = reader.readBytes();
                        break;
                    case 13:
                        message.etx_gas_tip = reader.readBytes();
                        break;
                    case 14:
                        message.etx_data = reader.readBytes();
                        break;
                    case 15:
                        reader.readMessage(message.etx_access_list, () => message.etx_access_list = ProtoAccessList.deserialize(reader));
                        break;
                    case 16:
                        message.v = reader.readBytes();
                        break;
                    case 17:
                        message.r = reader.readBytes();
                        break;
                    case 18:
                        message.s = reader.readBytes();
                        break;
                    case 19:
                        reader.readMessage(message.originating_tx_hash, () => message.originating_tx_hash = dependency_1.common.ProtoHash.deserialize(reader));
                        break;
                    case 20:
                        message.etx_index = reader.readUint32();
                        break;
                    case 21:
                        message.etx_sender = reader.readBytes();
                        break;
                    case 22:
                        reader.readMessage(message.tx_ins, () => message.tx_ins = ProtoTxIns.deserialize(reader));
                        break;
                    case 23:
                        reader.readMessage(message.tx_outs, () => message.tx_outs = ProtoTxOuts.deserialize(reader));
                        break;
                    case 24:
                        message.signature = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProtoTransaction {
            return ProtoTransaction.deserialize(bytes);
        }
    }
    export class ProtoAccessList extends pb_1.Message {
        one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            access_tuples?: ProtoAccessTuple[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("access_tuples" in data && data.access_tuples != undefined) {
                    this.access_tuples = data.access_tuples;
                }
            }
        }
        get access_tuples() {
            return pb_1.Message.getRepeatedWrapperField(this, ProtoAccessTuple, 1) as ProtoAccessTuple[];
        }
        set access_tuples(value: ProtoAccessTuple[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            access_tuples?: ReturnType<typeof ProtoAccessTuple.prototype.toObject>[];
        }): ProtoAccessList {
            const message = new ProtoAccessList({});
            if (data.access_tuples != null) {
                message.access_tuples = data.access_tuples.map(item => ProtoAccessTuple.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                access_tuples?: ReturnType<typeof ProtoAccessTuple.prototype.toObject>[];
            } = {};
            if (this.access_tuples != null) {
                data.access_tuples = this.access_tuples.map((item: ProtoAccessTuple) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.access_tuples.length)
                writer.writeRepeatedMessage(1, this.access_tuples, (item: ProtoAccessTuple) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProtoAccessList {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProtoAccessList();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.access_tuples, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ProtoAccessTuple.deserialize(reader), ProtoAccessTuple));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProtoAccessList {
            return ProtoAccessList.deserialize(bytes);
        }
    }
    export class ProtoTxIns extends pb_1.Message {
        one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tx_ins?: ProtoTxIn[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tx_ins" in data && data.tx_ins != undefined) {
                    this.tx_ins = data.tx_ins;
                }
            }
        }
        get tx_ins() {
            return pb_1.Message.getRepeatedWrapperField(this, ProtoTxIn, 1) as ProtoTxIn[];
        }
        set tx_ins(value: ProtoTxIn[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            tx_ins?: ReturnType<typeof ProtoTxIn.prototype.toObject>[];
        }): ProtoTxIns {
            const message = new ProtoTxIns({});
            if (data.tx_ins != null) {
                message.tx_ins = data.tx_ins.map(item => ProtoTxIn.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                tx_ins?: ReturnType<typeof ProtoTxIn.prototype.toObject>[];
            } = {};
            if (this.tx_ins != null) {
                data.tx_ins = this.tx_ins.map((item: ProtoTxIn) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tx_ins.length)
                writer.writeRepeatedMessage(1, this.tx_ins, (item: ProtoTxIn) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProtoTxIns {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProtoTxIns();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.tx_ins, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ProtoTxIn.deserialize(reader), ProtoTxIn));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProtoTxIns {
            return ProtoTxIns.deserialize(bytes);
        }
    }
    export class ProtoTxOuts extends pb_1.Message {
        one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tx_outs?: ProtoTxOut[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tx_outs" in data && data.tx_outs != undefined) {
                    this.tx_outs = data.tx_outs;
                }
            }
        }
        get tx_outs() {
            return pb_1.Message.getRepeatedWrapperField(this, ProtoTxOut, 1) as ProtoTxOut[];
        }
        set tx_outs(value: ProtoTxOut[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            tx_outs?: ReturnType<typeof ProtoTxOut.prototype.toObject>[];
        }): ProtoTxOuts {
            const message = new ProtoTxOuts({});
            if (data.tx_outs != null) {
                message.tx_outs = data.tx_outs.map(item => ProtoTxOut.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                tx_outs?: ReturnType<typeof ProtoTxOut.prototype.toObject>[];
            } = {};
            if (this.tx_outs != null) {
                data.tx_outs = this.tx_outs.map((item: ProtoTxOut) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tx_outs.length)
                writer.writeRepeatedMessage(1, this.tx_outs, (item: ProtoTxOut) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProtoTxOuts {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProtoTxOuts();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.tx_outs, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ProtoTxOut.deserialize(reader), ProtoTxOut));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProtoTxOuts {
            return ProtoTxOuts.deserialize(bytes);
        }
    }
    export class ProtoTxIn extends pb_1.Message {
        one_of_decls: number[][] = [[1], [2]];
        constructor(data?: any[] | ({} & (({
            previous_out_point?: ProtoOutPoint;
        }) | ({
            pub_key?: Uint8Array;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("previous_out_point" in data && data.previous_out_point != undefined) {
                    this.previous_out_point = data.previous_out_point;
                }
                if ("pub_key" in data && data.pub_key != undefined) {
                    this.pub_key = data.pub_key;
                }
            }
        }
        get previous_out_point() {
            return pb_1.Message.getWrapperField(this, ProtoOutPoint, 1) as ProtoOutPoint;
        }
        set previous_out_point(value: ProtoOutPoint) {
            pb_1.Message.setOneofWrapperField(this, 1, this.one_of_decls[0], value);
        }
        get has_previous_out_point() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get pub_key() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set pub_key(value: Uint8Array) {
            pb_1.Message.setOneofField(this, 2, this.one_of_decls[1], value);
        }
        get has_pub_key() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get _previous_out_point() {
            const cases: {
                [index: number]: "none" | "previous_out_point";
            } = {
                0: "none",
                1: "previous_out_point"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _pub_key() {
            const cases: {
                [index: number]: "none" | "pub_key";
            } = {
                0: "none",
                2: "pub_key"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            previous_out_point?: ReturnType<typeof ProtoOutPoint.prototype.toObject>;
            pub_key?: Uint8Array;
        }): ProtoTxIn {
            const message = new ProtoTxIn({});
            if (data.previous_out_point != null) {
                message.previous_out_point = ProtoOutPoint.fromObject(data.previous_out_point);
            }
            if (data.pub_key != null) {
                message.pub_key = data.pub_key;
            }
            return message;
        }
        toObject() {
            const data: {
                previous_out_point?: ReturnType<typeof ProtoOutPoint.prototype.toObject>;
                pub_key?: Uint8Array;
            } = {};
            if (this.previous_out_point != null) {
                data.previous_out_point = this.previous_out_point.toObject();
            }
            if (this.pub_key != null) {
                data.pub_key = this.pub_key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_previous_out_point)
                writer.writeMessage(1, this.previous_out_point, () => this.previous_out_point.serialize(writer));
            if (this.has_pub_key)
                writer.writeBytes(2, this.pub_key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProtoTxIn {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProtoTxIn();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.previous_out_point, () => message.previous_out_point = ProtoOutPoint.deserialize(reader));
                        break;
                    case 2:
                        message.pub_key = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProtoTxIn {
            return ProtoTxIn.deserialize(bytes);
        }
    }
    export class ProtoOutPoint extends pb_1.Message {
        one_of_decls: number[][] = [[1], [2]];
        constructor(data?: any[] | ({} & (({
            hash?: dependency_1.common.ProtoHash;
        }) | ({
            index?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("hash" in data && data.hash != undefined) {
                    this.hash = data.hash;
                }
                if ("index" in data && data.index != undefined) {
                    this.index = data.index;
                }
            }
        }
        get hash() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.ProtoHash, 1) as dependency_1.common.ProtoHash;
        }
        set hash(value: dependency_1.common.ProtoHash) {
            pb_1.Message.setOneofWrapperField(this, 1, this.one_of_decls[0], value);
        }
        get has_hash() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get index() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set index(value: number) {
            pb_1.Message.setOneofField(this, 2, this.one_of_decls[1], value);
        }
        get has_index() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get _hash() {
            const cases: {
                [index: number]: "none" | "hash";
            } = {
                0: "none",
                1: "hash"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _index() {
            const cases: {
                [index: number]: "none" | "index";
            } = {
                0: "none",
                2: "index"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            hash?: ReturnType<typeof dependency_1.common.ProtoHash.prototype.toObject>;
            index?: number;
        }): ProtoOutPoint {
            const message = new ProtoOutPoint({});
            if (data.hash != null) {
                message.hash = dependency_1.common.ProtoHash.fromObject(data.hash);
            }
            if (data.index != null) {
                message.index = data.index;
            }
            return message;
        }
        toObject() {
            const data: {
                hash?: ReturnType<typeof dependency_1.common.ProtoHash.prototype.toObject>;
                index?: number;
            } = {};
            if (this.hash != null) {
                data.hash = this.hash.toObject();
            }
            if (this.index != null) {
                data.index = this.index;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_hash)
                writer.writeMessage(1, this.hash, () => this.hash.serialize(writer));
            if (this.has_index)
                writer.writeUint32(2, this.index);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProtoOutPoint {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProtoOutPoint();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.hash, () => message.hash = dependency_1.common.ProtoHash.deserialize(reader));
                        break;
                    case 2:
                        message.index = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProtoOutPoint {
            return ProtoOutPoint.deserialize(bytes);
        }
    }
    export class ProtoTxOut extends pb_1.Message {
        one_of_decls: number[][] = [[1], [2]];
        constructor(data?: any[] | ({} & (({
            denomination?: number;
        }) | ({
            address?: Uint8Array;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("denomination" in data && data.denomination != undefined) {
                    this.denomination = data.denomination;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
            }
        }
        get denomination() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set denomination(value: number) {
            pb_1.Message.setOneofField(this, 1, this.one_of_decls[0], value);
        }
        get has_denomination() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set address(value: Uint8Array) {
            pb_1.Message.setOneofField(this, 2, this.one_of_decls[1], value);
        }
        get has_address() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get _denomination() {
            const cases: {
                [index: number]: "none" | "denomination";
            } = {
                0: "none",
                1: "denomination"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        get _address() {
            const cases: {
                [index: number]: "none" | "address";
            } = {
                0: "none",
                2: "address"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            denomination?: number;
            address?: Uint8Array;
        }): ProtoTxOut {
            const message = new ProtoTxOut({});
            if (data.denomination != null) {
                message.denomination = data.denomination;
            }
            if (data.address != null) {
                message.address = data.address;
            }
            return message;
        }
        toObject() {
            const data: {
                denomination?: number;
                address?: Uint8Array;
            } = {};
            if (this.denomination != null) {
                data.denomination = this.denomination;
            }
            if (this.address != null) {
                data.address = this.address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_denomination)
                writer.writeUint32(1, this.denomination);
            if (this.has_address)
                writer.writeBytes(2, this.address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProtoTxOut {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProtoTxOut();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.denomination = reader.readUint32();
                        break;
                    case 2:
                        message.address = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProtoTxOut {
            return ProtoTxOut.deserialize(bytes);
        }
    }
    export class ProtoAccessTuple extends pb_1.Message {
        one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: Uint8Array;
            storage_key?: dependency_1.common.ProtoHash[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("storage_key" in data && data.storage_key != undefined) {
                    this.storage_key = data.storage_key;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set address(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get storage_key() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.common.ProtoHash, 2) as dependency_1.common.ProtoHash[];
        }
        set storage_key(value: dependency_1.common.ProtoHash[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            address?: Uint8Array;
            storage_key?: ReturnType<typeof dependency_1.common.ProtoHash.prototype.toObject>[];
        }): ProtoAccessTuple {
            const message = new ProtoAccessTuple({});
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.storage_key != null) {
                message.storage_key = data.storage_key.map(item => dependency_1.common.ProtoHash.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                address?: Uint8Array;
                storage_key?: ReturnType<typeof dependency_1.common.ProtoHash.prototype.toObject>[];
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.storage_key != null) {
                data.storage_key = this.storage_key.map((item: dependency_1.common.ProtoHash) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeBytes(1, this.address);
            if (this.storage_key.length)
                writer.writeRepeatedMessage(2, this.storage_key, (item: dependency_1.common.ProtoHash) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProtoAccessTuple {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProtoAccessTuple();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readBytes();
                        break;
                    case 2:
                        reader.readMessage(message.storage_key, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_1.common.ProtoHash.deserialize(reader), dependency_1.common.ProtoHash));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProtoAccessTuple {
            return ProtoAccessTuple.deserialize(bytes);
        }
    }
}
